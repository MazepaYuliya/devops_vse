"–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"
import os
import json
from urllib.parse import urljoin

import pandas as pd
import requests
from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder


BASE_URL = os.environ['FAST_API_ADDR']
TIMEOUT = 30
CONNECT_ERROR = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ'
CREATE_DATA_EXAMPLE = """{
    "name": "Mila",
    "pk": 888,
    "kind": "terrier"
}"""
UPDATE_DATA_EXAMPLE = """{
    "name": "Mila",
    "old_pk": 888,
    "pk": 777,
    "kind": "terrier"
}"""

router = Router()


class DogsAction(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    dog_creating = State()
    dog_getting = State()
    dog_updating = State()


@router.message(Command("start"))
async def cmd_inline_url(message: types.Message):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start.
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–Ø –±–æ—Ç <b>–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏</b> üê©.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
    )
    builder = InlineKeyboardBuilder()
    commands = [
        'get_description',
        'post_timestamp',
        'get_dogs',
        'create_dog',
        'get_dog',
        'update_dog'
    ]
    for command in commands:
        builder.row(types.InlineKeyboardButton(
            text=command, callback_data=command)
        )

    await message.answer(
        ''.join(text),
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup(),
    )


def get_response(url, method='GET', **kwargs):
    "–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞ fastapi"
    if method.upper() == 'PATCH':
        response = requests.patch(url, timeout=TIMEOUT, **kwargs)
    elif method.upper() == 'POST':
        response = requests.post(url, timeout=TIMEOUT, **kwargs)
    else:
        response = requests.get(url, timeout=TIMEOUT, **kwargs)

    try:
        response_data = response.json()
    except json.JSONDecodeError:
        response_data = response.text
    return response.status_code, response_data


@router.callback_query(lambda c: c.data == 'get_description')
async def get_description_click(callback_query: types.CallbackQuery):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã get_description.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ fastapi
    """
    url = BASE_URL
    status, response_text = get_response(url, 'GET')
    if status//100 != 2:
        await callback_query.message.answer(CONNECT_ERROR)
        return

    await callback_query.message.answer(
        f'<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b>\n{response_text}',
        parse_mode=ParseMode.HTML
    )


@router.callback_query(lambda c: c.data == 'post_timestamp')
async def post_timestamp_click(callback_query: types.CallbackQuery):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã post_timestamp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    """
    url = urljoin(BASE_URL, 'post')
    status, response_json = get_response(url, 'POST')
    if status//100 != 2:
        await callback_query.message.answer(CONNECT_ERROR)
        return
    dumped_json = json.dumps(response_json, indent=4)
    await callback_query.message.answer(
        f'<b>–î–æ–±–∞–≤–ª–µ–Ω timestamp:</b>\n<code>{dumped_json}</code>',
        parse_mode=ParseMode.HTML
    )


@router.callback_query(lambda c: c.data == 'get_dogs')
async def get_dogs_click(callback_query: types.CallbackQuery):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã get_dogs.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±–∞–∫ –≤ –±–∞–∑–µ
    """
    url = urljoin(BASE_URL, 'dog')
    status, response_json = get_response(url, 'GET')
    if status//100 != 2:
        await callback_query.message.answer(CONNECT_ERROR)
        return
    dog_df = pd.DataFrame(response_json)
    await callback_query.message.answer(
        f"<b>–°–ø–∏—Å–æ–∫ —Å–æ–±–∞–∫</b>:\n<pre>{dog_df}</pre>",
        parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data == 'get_dog')
async def get_dog_click(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã get_dog.
    –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ pk —Å–æ–±–∞–∫–∏, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
    """
    await state.set_state(getattr(DogsAction, 'dog_getting'))
    await callback_query.message.answer(
        '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏</b>:\n–í–≤–µ–¥–∏—Ç–µ pk',
        parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data == 'create_dog')
async def create_dog_click(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã create_dog.
    –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–∞–∫–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
    """
    await state.set_state(getattr(DogsAction, 'dog_creating'))
    text = (
        '<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏</b>',
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:',
        f'<code>{CREATE_DATA_EXAMPLE}</code>'
    )
    await callback_query.message.answer(
        '\n'.join(text),
        parse_mode='HTML'
    )


@router.callback_query(lambda c: c.data == 'update_dog')
async def update_dog_click(
    callback_query: types.CallbackQuery,
    state: FSMContext
):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã update_dog.
    –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–∞–∫–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    await state.set_state(getattr(DogsAction, 'dog_updating'))
    text = (
        '<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏</b>',
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:',
        f'<code>{UPDATE_DATA_EXAMPLE}</code>'
    )
    await callback_query.message.answer('\n'.join(text), parse_mode='HTML')


@router.message(DogsAction.dog_creating)
async def create_dog(message: types.Message, state: FSMContext):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–æ–±–∞–∫–∏
    """
    await state.clear()
    try:
        dog_data = json.loads(message.text)
    except json.JSONDecodeError:
        await message.answer(
            '–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π json'
        )
        return
    url = urljoin(BASE_URL, 'dog')
    status, response_json = get_response(url, 'POST', json=dog_data)
    if status//100 != 2 and status//100 != 4:
        await message.answer(CONNECT_ERROR)
        return
    dumped_json = json.dumps(response_json, ensure_ascii=False)
    if status//100 == 4:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±–∞–∫–∏:\n<code>{dumped_json}</code>',
            parse_mode='HTML'
        )
        return
    await message.answer(
        f'<b>–°–æ–∑–¥–∞–Ω–∞ —Å–æ–±–∞–∫–∞:</b>\n<code>{dumped_json}</code>',
        parse_mode='HTML'
    )


@router.message(DogsAction.dog_updating)
async def update_dog(message: types.Message, state: FSMContext):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±–∞–∫–µ
    """
    await state.clear()
    try:
        dog_data = json.loads(message.text)
    except json.JSONDecodeError:
        await message.answer(
            '–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π json'
        )
        return
    if 'old_pk' not in dog_data:
        await message.answer(
            '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π pk —Å–æ–±–∞–∫–∏'
        )
        return
    pk = dog_data["old_pk"]
    url = urljoin(BASE_URL, f'dog/{pk}')
    status, response_json = get_response(url, 'PACH', json=dog_data)
    if status//100 != 2 and status//100 != 4:
        await message.answer(CONNECT_ERROR)
        return
    dumped_json = json.dumps(response_json, ensure_ascii=False)
    if status//100 == 4:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n<code>{dumped_json}</code>',
            parse_mode='HTML'
        )
        return
    await message.answer(
        f'<b>–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∞–∫–∏ {pk}:</b>\n<code>{dumped_json}</code>',
        parse_mode='HTML'
    )


@router.message(DogsAction.dog_getting)
async def get_dog(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–∞–∫–∏
    """
    await state.clear()
    pk = message.text
    if not pk.isdigit():
        await message.answer(
            'pk –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º'
        )
        return
    url = urljoin(BASE_URL, f'dog/{pk}')
    status, response_json = get_response(url, 'GET')
    if status//100 != 2 and status//100 != 4:
        await message.answer(CONNECT_ERROR)
        return
    dumped_json = json.dumps(response_json, ensure_ascii=False)
    if status//100 == 4:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n<code>{dumped_json}</code>',
            parse_mode='HTML'
        )
        return
    await message.answer(
        f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–∞–∫–µ {pk}:</b>\n<code>{dumped_json}</code>',
        parse_mode='HTML'
    )
